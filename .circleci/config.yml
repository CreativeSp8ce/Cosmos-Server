version: 2
jobs:
  build:
    machine: # executor type
      image: ubuntu-2204:2024.05.1

    steps:
      - checkout

      - run:
          name: Setup docker and buildx
          command: docker buildx create --use

      - run:
          name: install dependencies
          command: sudo apt-get install bash curl

      - run:
          name: download Go
          command: wget https://golang.org/dl/go1.21.6.linux-amd64.tar.gz
      
      - run:
          name: install Go
          command: sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.21.6.linux-amd64.tar.gz
      
      - run:
          name: set Go path
          command: echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV

      - run: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
     
      - run: |
          node -v

      - run: |
          nvm install v16
          node -v
          nvm alias default v16

      - run: |
          node -v

      - run: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD

      - run:
          name: Install dependencies
          command: npm install
          
      - run:
          name: Download GeoLite2-Country database
          command: |
            curl -s -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=$MAX_TOKEN&suffix=tar.gz" -o GeoLite2-Country.tar.gz
            tar -xzf GeoLite2-Country.tar.gz --strip-components 1 --wildcards "*.mmdb"
      
      - run:
          name: Download and Extract ARM Nebula Binary
          command: |
            curl -LO https://github.com/slackhq/nebula/releases/download/v1.8.2/nebula-linux-arm64.tar.gz
            tar -xzvf nebula-linux-arm64.tar.gz
      
      - run:
          name: Rename ARM Nebula Binary
          command: |
            mv nebula nebula-arm
            mv nebula-cert nebula-arm-cert
      
      - run:
          name: Download and Extract Nebula Binary
          command: |
            curl -LO https://github.com/slackhq/nebula/releases/download/v1.8.2/nebula-linux-amd64.tar.gz
            tar -xzvf nebula-linux-amd64.tar.gz

      - run:
          name: Build UI
          command: npm run client-build

      - run:
          name: Build and publish dockerfiles
          command: sh docker.sh

       - run:
          name: Install Debian packaging tools
          command: |
            sudo apt-get update
            sudo apt-get install -y debhelper dh-make jq

      - run:
          name: Prepare Debian package structure
          command: |
            VERSION=$(jq -r .version package.json)
            PKG_NAME=cosmos-cloud
            MAINTAINER_NAME="Yann Stepienik"
            MAINTAINER_EMAIL="cosmoscloudsup@gmail.com"
            mkdir -p ${PKG_NAME}-${VERSION}
            cp -r build/* ${PKG_NAME}-${VERSION}/
            cd ${PKG_NAME}-${VERSION}
            export DEBFULLNAME="$MAINTAINER_NAME"
            export DEBEMAIL="$MAINTAINER_EMAIL"
            dh_make --createorig -s -y -p ${PKG_NAME}_${VERSION} \
              --email "$MAINTAINER_EMAIL" \
              --packagename "$PKG_NAME"

      - run:
          name: Customize Debian control files
          command: |
            VERSION=$(jq -r .version package.json)
            PKG_NAME=cosmos-cloud
            cd ${PKG_NAME}-${VERSION}/debian
            echo "override_dh_auto_install:" >> rules
            echo "	dh_auto_install -- prefix=/usr/local/${PKG_NAME}" >> rules
            echo "override_dh_link:" >> rules
            echo "	dh_link usr/local/${PKG_NAME}/cosmos usr/local/bin/cosmos" >> rules

      - run:
          name: Build x86_64 .deb package
          command: |
            VERSION=$(jq -r .version package.json)
            PKG_NAME=cosmos-cloud
            cd ${PKG_NAME}-${VERSION}
            chmod 0755 debian
            find debian -type d -exec chmod 0755 {} \;
            find debian -type f -exec chmod 0644 {} \;
            chmod 0755 debian/rules
            dpkg-buildpackage -us -uc -b

      - run:
          name: Prepare ARM64 package structure
          command: |
            VERSION=$(jq -r .version package.json)
            PKG_NAME=cosmos-cloud
            mkdir -p ${PKG_NAME}-${VERSION}-arm64
            cp -r build/* ${PKG_NAME}-${VERSION}-arm64/
            mv ${PKG_NAME}-${VERSION}-arm64/cosmos-arm64 ${PKG_NAME}-${VERSION}-arm64/cosmos
            cd ${PKG_NAME}-${VERSION}-arm64
            dh_make --createorig -s -y

      - run:
          name: Build ARM64 .deb package
          command: |
            VERSION=$(jq -r .version package.json)
            PKG_NAME=cosmos-cloud
            cd ${PKG_NAME}-${VERSION}-arm64
            dpkg-buildpackage -us -uc -b -aarm64

      - run:
          name: Create .zip packages
          command: |
            VERSION=$(jq -r .version package.json)
            PKG_NAME=cosmos-cloud
            zip -r ${PKG_NAME}-${VERSION}-amd64.zip ${PKG_NAME}-${VERSION}
            zip -r ${PKG_NAME}-${VERSION}-arm64.zip ${PKG_NAME}-${VERSION}-arm64

      - run:
          name: Create GitHub Release
          command: |
            VERSION=$(jq -r .version package.json)
            PKG_NAME=cosmos-cloud
            gh release create v$VERSION \
              ../${PKG_NAME}_${VERSION}_amd64.deb \
              ../${PKG_NAME}_${VERSION}_arm64.deb \
              ${PKG_NAME}-${VERSION}-amd64.zip \
              ${PKG_NAME}-${VERSION}-arm64.zip \
              --title "Release $VERSION" \
              --notes "Release version $VERSION for x86_64 and ARM64 architectures"

workflows:
  version: 2
  build-all:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - unstable